---
title : Julia Workshop @ YoMos 2025
author : Johannes Apelt
date : 19.05.2025
weave_options: 
    doctype: md2html
    template: md2html.tpl
---


## 1 Fundamentals

### 1.1 Some Collection Types 
Let's see how vectors, tuples and matrices can be defined.
```julia 
x = [1, 2, 3] # Vector{Int64}
y = [1.0, 2, 3] # Vector{Float64}
nt = (a=1.9, b=2, c="hello world") # named tuple (immutable), has no fixed element type
M = [1 2; 3 4] # Matrix{Int64}
```
We can also use list comprehensions.
```julia
[i^2 for i in 1:3]
```
These types are all iterable and can be indexed.

```julia
x[1]
``` 
```julia
M[1,2]
```
```julia
nt.c
```

```julia 
for i in eachindex(nt)
    println(nt[i])
end
```

### 1.2 Functions
In Julia, functions are objects that map a tuple of arguments to a return
value. 
Here are a few example how to define a function. 
```julia 
function hello(x)
    println("hello $(x)!")
    return nothing
end
```
```julia 
f(x) = x^2
```
```julia
g = x -> sqrt(x)
```
```julia 
hello("world")
```
```julia 
g(4)
```

### 1.3 Composite Types (i.e. Objects) 
Composite types can be defined using Julia's `structs`.
Like functions, these can be explicitly typed, but this is not reqired.
The compiler tries to deduce what type each variable has (type inference).
Julia has support for parametric types, which for instance means we do not have
to specify the exact type, but we can encode relation of types or make use of
the type hierarchy. 
The compiler will then call the method that fits the signature of the arguments
used, which is called multiple dispatch.

To illustrate usage, let's define a type for complex numbers, that simply stores
real and imaginary part.
These can be e.g. `Float64` or `Int64` (or other numeric types), but we want
both real and imaginary part to have the same type. 
Thus, we use the best fitting supertype of these, which is `Real` and allow any
subtype for the real and imaginary part.
```julia 
mutable struct ComplexNumber{T<:Real}
  re::T 
  im::T
end
```
The `mutable` keyword means we can change fields after creation of an instance. 
For every `struct` definition we automatically get a constructor method with
the same name. 

```julia 
z = ComplexNumber(1, 2)
```
We cann access the fields of a struct by their name. 
```julia 
z.re
```
```julia 
z.im
```
To make our type more readable, we define the behaviour for displaying our type in the REPL.
```julia 
Base.show(io::IO, ::MIME"text/plain", z::ComplexNumber) = print(io, "$(z.re) + $(z.im)i")
```
Now this is a lot nicer.
```julia 
ComplexNumber(1.0, 0.0)
```

The constructor works for both types, but not if we mix:
```julia 
ComplexNumber(1.0, 0)
```
In fact, the error message tells us exactly what is wrong: There is no method
that matches the signature of our call. 
In particular, the second argument's type does not match the type of the first
one.
We can easily fix this by providing more constructors.

### 1.4 Multiple Dispatch: A Key Feature of Julia 

#### 1.4.1 Adding Functionality to our `ComplexNumber` Type

We can add a constructor to allow mixing of numeric types. 
`ComplexNumber` type.
```julia 
function ComplexNumber(r::Real, i::Real)
  r, i = promote(r, i)
  return ComplexNumber(r, i)
end;
```
Note that we have specified both arguments to be `Real`, but not parametrically
as before. 
Because subtypes of `Real` are matched as well, this now allows to mix numeric
types.
The function `promote` parses all arguments to their highest level type or to
the lowest supertype (the maximum element is `Any` so there always
exist a common supertype, but parsing may fail nevertheless).
Thus, we can now do 
```julia 
ComplexNumber(0.3, true)
```
Note that Julia offers the short notation `x...` to unwrap the elements of a
collection `x`. 
Thus, we can achieve the same thing with one line.
```julia, eval=false
ComplexNumber(r::Real, i::Real) = ComplexNumber(promote(r,i)...)
```

We can also add a constructor that can be used when the imaginary part is zero.
```julia 
ComplexNumber(r::Real) = ComplexNumber(r, zero(r))
ComplexNumber(1)
```

Due to multiple dispatch, we can easily define the behaviour for existing
functions operating on our new type.
Even the binary operator `+` is just a function, so we can define addition with
our type.
```julia 
import Base: +
+(x::ComplexNumber, y::ComplexNumber) = ComplexNumber(x.re + y.re, x.im + y.im)
+(x::ComplexNumber, y::Real) = ComplexNumber(x.re + y, x.im)
```
Now we can add our complex numbers.
```julia
ComplexNumber(1, 2) + ComplexNumber(3.0, -1.2)
```
```julia
ComplexNumber(1, 2) + 1
```

#### 1.4.2 Another Illustrating Example 
Lets define a type `Animal` that has subtypes `Dog`, `Cat` and `Mouse`. 
```julia 
abstract type Animal end
struct Mouse <: Animal
    name::String
end
struct Cat <: Animal
    name::String
end
struct Dog  <: Animal
    name::String
    age::Int64
end
```
Akin to the game rock, paper, scissors, we want to define who "wins" if two
animals meet. 
It makes sense to define this function for all animals, because it implements a
similar routine, and we can make use of multiple dispatch to decide what is
happening depending on the input types.
```julia 
meet(x::Mouse, y::Dog) = println("Mouse \"$(x.name)\" scares dog \"$(y.name)\" away.")
meet(x::Cat, y::Mouse) = println("Cat \"$(x.name)\" sneaks up on mouse \"$(y.name)\".")
meet(x::Dog, y::Cat) = println(x.age > 10 ? "Dog \"$(x.name)\" is to old to run fast: Cat \"$(y.name)\" strolls away." : "Dog \"$(x.name)\" chases cat \"$(y.name)\" up a tree.")
```
Interactions are symmetric, which we can implement using the supertype.
```julia 
meet(x::Animal, y::Animal) = meet(y, x)
```
Now these animals can meet.
```julia 
alice = Cat("Alice")
bob = Dog("Bob", 1)
jerry = Mouse("Jerry")
bill = Dog("Bill", 10)

meet(alice, bob)
```
```julia 
meet(bob, jerry)
```
```julia 
meet(alice, jerry)
```
```julia 
meet(bill, alice)
```
The macro `@which` or function `which` show us which method is actually
called (this does not work in the `Weave` sandbox used to generate this file).
```julia, eval=false
@which meet(alice, bob) # meet(::Animal, ::Animal)
@which meet(bob, alice) # meet(::Dog, ::Cat)
```

## 2 ODE Simulations and Plots

### 2.1 First Steps
Julia has different possibilities to load code. 
To import all explicitly exported definitions from a package, we can use the
keyword `using`.
Here, we use a package for numerical simulations of ODEs (and many other
dynamical systems) and a plotting framework.
```julia 
using DifferentialEquations 
using GLMakie;
```

```julia, echo=false 
Makie.inline!(true)
```

We define the right-hand side of an ODE system with in-place computation of the
rate of change as follows (`DifferentialEquations` expects this specific
signature).
```julia 
function f!(du, u, p, t)
    x, y = u # we can unpack vectors or tuples like this
    œÅ, Œ±, Œ∏, Œ¥, Œ≥ = p # julia has support for unicode ü•≥
    du .= [
        œÅ*x*(1-x) - Œ±/(Œ∏ + x)*x*y
        -Œ¥*y + Œ≥*Œ±/(Œ∏ + x)*x*y
    ]
    return nothing # we return `nothing` because we update `du` in-place 
end;
```
Note that functions mutating one of its arguments are typically indicated by
using at the end of their name `!`.
The `.` is syntactic sugar for element wise operations. 
Here we need this, because we want to overwrite the entries of the vector `du`
(without the dot, this would create a new vector).

Now let's define the inital conditions, parameters and time span. 
The parameters can be e.g. given as a named tuple or vector.
```julia 
u0 = [0.1,0.2]
p = (œÅ=1.0, Œ±=2.0, Œ∏=1.0, Œ¥=0.5, Œ≥=1.0)
tspan = (0.0, 50.0);
```
Now we create an ODE problem and solve it using the default algorithm. 
We can also specify at which time points we want to now the solution (for
smooth plots).
```julia 
problem = ODEProblem(f!, u0, tspan, p)
sol = solve(problem; saveat=LinRange(tspan..., 501));
```

A simple plot of the solution can be created like this.
```julia 
lines(sol)
```

We have more fine control over the plot, if we tell `Makie` how to plot
solutions using a `series` plot.
```julia 
Makie.convert_arguments(T::Type{<:Series}, sol::ODESolution) = Makie.convert_arguments(T, sol.t, hcat(sol.u...))
```
```julia
fig = Figure();
ax = Axis(fig[1,1], xlabel="time", ylabel="population density", title="The MacArthur-Rosenzweig Model")
series!(ax, sol; 
        labels=["x", "y"],
        color=color=Makie.wong_colors()[1:2],
        linewidth=2);
axislegend(ax)
fig
```
Note that the solution object can be called as a function, which allows to get
the solution at arbitrary time points.
```julia 
sol(10.12345)
```

### 2.2 Integration with `Measurements.jl`
Because Julia uses multiple dispatch, it is generally easy to extend existing
data types or to use existing functions for new types. 
A nice example for this is illustrated with the package `Measurements.jl`, that
allows us to employ linear error propagation without much hassle.
As we will see, we don't have to change much code compared to the example
above.

First, we define the parameters, initial conditions and time span accordingly.
```julia 
using Measurements
p = (œÅ=1.8 ¬± 0.2, Œ±=1.1 ¬± 0.04, Œ∏=0.8 ¬± 0.08, Œ¥=0.2 ¬± 0.01, Œ≥=1.0 ¬± 0.09)
u0 = [0.1, 0.2] .¬± 0.00
tspan = (0.0, 100.0) .¬± 0.0
```
Now we can solve the system without any modifications to the code above.
```julia
problem = ODEProblem(f!, u0, tspan, p)
sol = solve(problem; saveat=LinRange(tspan..., 501))
```
Plotting the solution is not overly complicted either.
```julia
labels = ["prey", "predator"]
fig = Figure();
ax = Axis(fig[1,1])
for i in 1:2
    band!(ax, sol.t, sol[i,:]; color=Makie.wong_colors()[i], alpha=0.3)
    lines!(ax, sol.t, sol[i,:]; color=Makie.wong_colors()[i], label=labels[i])
end
axislegend(ax)
fig
```

## 3 Interactive GUI for ODE Simulations
`Makie` has support for `Observable` types. 
With these, we can propagate changes automatically and update dependent
variables.
This can be used to build Interactive GUIs with a plot of a simulation
reacting to parameter change in real time.

```julia 
function odegui(f!::Function, u0::NamedTuple, p::NamedTuple; 
                size::Tuple{Int64, Int64}=(800,500), # optional arguments
                range=0:0.1:10)

    # create an empty figure and axis
    fig = Figure(size=size);
    ax = Axis(fig[1,1]);

    # create sliders for interactivity
    # use keys of named tuples for state variables and parameters
    slider_names = [string.([keys(p)...]); string.([keys(u0)...]) .* "(0)"]
    sliders = [(
        label = name,
        range = 0:0.1:10,
        format = x -> "$x"
    ) 
        for name in slider_names
    ]
    # organize sliders in a grid
    lsgrid = SliderGrid(fig[1:2,2], sliders..., tellheight=false)
    # sliders values as Vector{Observable{Float64}}
    sliderobservables = [s.value for s in lsgrid.sliders]
    # slider values as Observable{Vector{Float64}} (listens to changes in any slider)
    slider_values = lift(sliderobservables...) do slvalues...
        [slvalues...]
    end
    # set sliders close to inital values
    for i in 1:length(sliderobservables)
        set_close_to!(lsgrid.sliders[i], [values(p)..., u0...][i])
    end

    # add slider for tspan with hard coded choices
    T_end_slider = SliderGrid(fig[2,1], (label = "T", range = [10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000], format = x->"$x"))
    T_end = T_end_slider.sliders[1].value
    set_close_to!(T_end_slider.sliders[1], 50)

    # solve ode problem with parameters defined by slider
    # the @lift macro can be used to define variables that depend on other observable variables and need to be updated
    _p = @lift $(slider_values)[1:length(p)]
    _u0 = @lift $(slider_values)[length(p)+1:end]
    _tspan = @lift (0.0, $T_end)
    # remake and solve ODEProblem with new arguments
    prob = @lift remake(problem; u0=$_u0, tspan=$_tspan, p=$_p);
    sol = @lift solve($prob; saveat=LinRange(0.0, $T_end, 501));
    # plot solution (Makie recognizes observables and updates the plot on change)
    series!(ax, sol, labels=["x", "y"], color=Makie.wong_colors()[1:2], linewidth=2)
    axislegend(ax)

    # update plot ranges on change
    on(sol) do sol
        y_range = [minimum(sol), maximum(sol)]
        y_pad = 0.05*(y_range[2] - y_range[1])
        x_pad = 0.05*(sol.t[end] - sol.t[1])
        xlims!(ax, 0.0 - x_pad, sol.t[end] + x_pad)
        ylims!(ax, y_range[1] - y_pad, y_range[2] + y_pad)
    end

    # update layout
    rowgap!(lsgrid.layout, 7)
    colsize!(fig.layout, 1, Relative(2/3))

    return fig
end
```
Now we can interactively explore the model. 

```julia 
u0 = (x=0.1, y=0.2)
p = (œÅ=1.0, Œ±=2.0, Œ∏=1.0, Œ¥=0.5, Œ≥=1.0)
tspan = (0.0, 50.0)

odegui(f!, u0, p)
```




